---
# Derived from FBJS' eslintrc (which I originally made), but generally more
# strict.
parser: babel-eslint

plugins:
  - babel

env:
  node: true
  es6: true

rules:
  # Possible Errors <http://eslint.org/docs/rules/#possible-errors>
  comma-dangle: [error, always-multiline]
  no-cond-assign: off
  no-console: warn
  no-constant-condition: [error, {checkLoops: true}]
  no-control-regex: error
  no-debugger: warn
  no-dupe-args: error
  no-dupe-keys: error
  no-duplicate-case: error
  no-empty-character-class: error
  no-empty: [warn, {allowEmptyCatch: true}]
  # can cause subtle bugs in IE 8
  no-ex-assign: warn
  no-extra-boolean-cast: error
  # warn only about extra parens around unabiguous stuff
  no-extra-parens: [warn, all, {conditionalAssign: false, nestedBinaryExpressions: false, returnAssign: false}]
  no-extra-semi: error
  no-func-assign: error
  # babel and es2015 allow block-scoped functions
  no-inner-declarations: off
  no-invalid-regexp: error
  no-irregular-whitespace: error
  no-negated-in-lhs: error
  no-obj-calls: error
  no-prototype-builtins: error
  no-regex-spaces: error
  no-sparse-arrays: error
  no-unexpected-multiline: error
  no-unreachable: error
  no-unsafe-finally: error
  use-isnan: error
  valid-jsdoc: warn
  valid-typeof: error

  # Best Practices <http://eslint.org/docs/rules/#best-practices>
  accessor-pairs: [warn, {setWithoutGet: true}]
  block-scoped-var: warn
  complexity: [warn, 5]
  consistent-return: [error, {treatUndefinedAsUnspecified: false}]
  curly: [error, all]
  default-case: off
  dot-location: [error, property]
  dot-notation: [error, {allowKeywords: true}]
  eqeqeq: [error, allow-null]
  guard-for-in: warn
  no-alert: warn
  no-caller: error
  no-case-declarations: off
  no-div-regex: off
  no-else-return: off
  # `foo == null` is actually useful: we allow it in the eqeqeq rule
  no-eq-null: off
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-fallthrough: warn
  no-floating-decimal: error
  no-implicit-coercion: off
  no-implied-eval: error
  no-invalid-this: off
  no-iterator: error
  no-labels: error
  no-lone-blocks: error
  # doesn't matter if I enforce let/const
  no-loop-func: off
  no-magic-numbers: off
  no-multi-spaces: error
  no-multi-str: error
  no-native-reassign: [error, {exceptions: [Map, Set]}]
  no-new-func: error
  no-new: error
  no-octal-escape: error
  no-octal: error
  no-param-reassign: off
  no-process-env: warn
  no-proto: error
  no-redeclare: error
  no-return-assign: off
  no-script-url: error
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unused-expressions: error
  no-useless-call: error
  no-useless-concat: warn
  no-useless-escape: error
  no-void: off
  no-warning-comments: warn
  no-with: error
  radix: error
  vars-on-top: off
  wrap-iife: [error, inside]
  yoda: error

  # Strict Mode <http://eslint.org/docs/rules/#strict-mode>
  # babel should add this, not us
  strict: [error, never]

  # Variables <http://eslint.org/docs/rules/#variables>
  init-declarations: off
  no-catch-shadow: warn
  no-delete-var: error
  no-label-var: error
  no-restricted-globals: off
  no-shadow-restricted-names: error
  no-shadow: error
  no-undef-init: off
  no-undef: error
  # using undefined is safe because we enforce no-shadow-restricted-names
  no-undefined: off
  no-unused-vars: [warn, {args: none, vars: all, caughtErrors: none}]
  no-use-before-define: off

  # Node.js <http://eslint.org/docs/rules/#nodejs>
  callback-return: warn
  global-require: off
  handle-callback-err: warn
  no-mixed-requires: off
  no-new-require: warn
  no-path-concat: warn
  no-process-exit: warn
  no-restricted-modules: off
  no-sync: warn

  # Stylistic Issues <http://eslint.org/docs/rules/#stylistic-issues>
  # see babel/array-bracket-spacing
  array-bracket-spacing: off
  block-spacing: [error, always]
  brace-style: [error, 1tbs, {allowSingleLine: true}]
  camelcase: [warn, {properties: always}]
  comma-spacing: [error, {before: false, after: true}]
  comma-style: [error, last]
  computed-property-spacing: [error, never]
  # we may use more contextually relevant names for this than self
  consistent-this: [off, self]
  eol-last: error
  # already handled by babel-plugin-transform-es2015-function-name
  func-names: off
  func-style: [error, declaration]
  id-length: off
  id-match: off
  indent: [error, 2, {SwitchCase: 1, VariableDeclarator: 1}]
  # this diverges from FB coding standards
  jsx-quotes: [error, prefer-single]
  key-spacing: [error, {beforeColon: false, afterColon: true}]
  keyword-spacing: [error, {before: true, after: true}]
  linebreak-style: [error, unix]
  lines-around-comment: off
  max-depth: [warn, 5]
  max-len: [warn, 80, 2, {ignoreUrls: true}]
  max-lines: [warn, {max: 1000, skipBlankLines: true, skipComments: true}]
  max-nested-callbacks: [warn, 3]
  max-params: [warn, 5]
  max-statements-per-line: [warn, {max: 3}]
  max-statements: [warn, 25]
  # see babel/new-cap
  new-cap: off
  new-parens: error
  newline-after-var: off
  newline-before-return: off
  no-array-constructor: error
  no-bitwise: off
  no-continue: off
  no-inline-comments: off
  no-lonely-if: error
  no-mixed-operators: off
  no-mixed-spaces-and-tabs: error
  no-multiple-empty-lines: off
  no-negated-condition: off
  no-nested-ternary: error
  no-new-object: error
  no-plusplus: off
  no-restricted-syntax: off
  no-spaced-func: error
  no-ternary: off
  no-trailing-spaces: [error, {skipBlankLines: false}]
  no-underscore-dangle: off
  no-unneeded-ternary: error
  no-whitespace-before-property: error
  object-curly-newline: off
  # see babel/object-curly-spacing
  object-curly-spacing: off
  object-property-newline: [error, {allowMultiplePropertiesPerLine: true}]
  # this diverges from FB coding standards
  one-var: off
  operator-assignment: [error, always]
  operator-linebreak: [error, after]
  padded-blocks: off
  quote-props: [error, as-needed]
  quotes: [error, single, {avoidEscape: true, allowTemplateLiterals: true}]
  require-jsdoc: off
  semi-spacing: [error, {before: false, after: true}]
  semi: [error, always]
  sort-vars: off
  space-before-blocks: [error, always]
  space-before-function-paren: [error, {anonymous: never, named: never}]
  space-in-parens: [error, never]
  space-infix-ops: off
  space-unary-ops: [error, {words: true, nonwords: false, overrides: {}}]
  spaced-comment: [error, always, {block: {exceptions: ["*"]}}]
  unicode-bom: error
  wrap-regex: off

  # ECMAScript 6 <http://eslint.org/docs/rules/#ecmascript-6>
  arrow-body-style: [error, as-needed, {requireReturnForObjectLiteral: false}]
  # see babel/arrow-parens
  arrow-parens: off
  arrow-spacing: [error, {before: true, after: true}]
  constructor-super: error
  # see babel/generator-star-spacing
  generator-star-spacing: off
  no-class-assign: error
  no-confusing-arrow: off
  no-const-assign: error
  no-dupe-class-members: error
  no-duplicate-imports: [error, {includeExports: false}]
  no-this-before-super: error
  no-useless-computed-key: error
  no-useless-constructor: warn
  no-useless-rename: error
  no-var: error
  # see babel/object-shorthand
  object-shorthand: off
  prefer-arrow-callback: [error, {allowNamedFunctions: false, allowUnboundThis: true}]
  prefer-const: [error, {destructuring: all, ignoreReadBeforeAssign: false}]
  # I'll revisit this later
  prefer-reflect: off
  prefer-spread: error
  # would inhibit empty string concatenation for coercion
  prefer-template: off
  require-yield: off
  rest-spread-spacing: [error, never]

  # eslint-plugin-babel <https://github.com/babel/eslint-plugin-babel>
  # I feel like this creates more parity with anonymous functions
  babel/generator-star-spacing: [warn, {before: false, after: true}]
  babel/new-cap: [warn, {capIsNew: true, newIsCap: false}]
  babel/array-bracket-spacing: [error, never]
  babel/object-curly-spacing: [error, never]
  babel/object-shorthand: [error, always]
  # this diverges from FB coding standards
  babel/arrow-parens: [error, as-needed]
  babel/no-await-in-loop: warn
